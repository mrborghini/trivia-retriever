name: Rust Build and Release

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  EXECUTABLE_NAME: "trivia-retriever"

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}

    steps:
    - uses: actions/checkout@v4

    - name: Extract version from Cargo.toml
      id: extract_version
      run: |
        version=$(grep '^version =' Cargo.toml | sed 's/version = \"//;s/\"//')
        echo "version=$version" >> $GITHUB_OUTPUT

  x86_64-linux:
    needs: extract-version
    runs-on: ubuntu-latest
    env:
      CARGO_VERSION: ${{ needs.extract-version.outputs.version }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      run: rustup update stable

    - name: Build
      run: cargo build --release --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Create release artifact
      run: |
        mkdir -p artifacts
        cp target/release/${{ env.EXECUTABLE_NAME }} artifacts/${{ env.EXECUTABLE_NAME }}-x86_64-Linux

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-binary-x86_64-linux
        path: artifacts/
  
  aarch64-linux:
    needs: extract-version
    runs-on: ubuntu-latest
    env:
      CARGO_VERSION: ${{ needs.extract-version.outputs.version }}
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: "aarch64-linux-gnu-gcc"
      ARCHITECTURE: "aarch64-unknown-linux-gnu"

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      run: |
        rustup update stable
        rustup target add ${{ env.ARCHITECTURE }}
  
    - name: Install build dependencies
      run: sudo apt install gcc-aarch64-linux-gnu -y

    - name: Build
      run: cargo build --release --target ${{ env.ARCHITECTURE }} --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Create release artifact
      run: |
        mkdir -p artifacts
        cp target/${{ env.ARCHITECTURE }}/release/${{ env.EXECUTABLE_NAME }} artifacts/${{ env.EXECUTABLE_NAME }}-aarch64-Linux

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-binary-aarch64-linux
        path: artifacts/

  x86_64-windows:
    needs: extract-version
    runs-on: windows-latest
    env:
      CARGO_VERSION: ${{ needs.extract-version.outputs.version }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      run: rustup update stable

    - name: Build
      run: cargo build --release --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Create release artifact
      run: |
        mkdir artifacts
        copy target\release\${{ env.EXECUTABLE_NAME }}.exe artifacts\${{ env.EXECUTABLE_NAME }}-x86_64-Windows.exe

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-binary-windows
        path: artifacts/

  release:
    needs:
      - extract-version
      - x86_64-linux
      - x86_64-windows
      - aarch64-linux
    
    runs-on: ubuntu-latest
    env:
      CARGO_VERSION: ${{ needs.extract-version.outputs.version }}

    steps:
    - uses: actions/checkout@v4

    - name: Download x86_64 Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: release-binary-x86_64-linux
        path: ./release-binary-x86_64-linux

    - name: Download aarch64 Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: release-binary-aarch64-linux
        path: ./release-binary-aarch64-linux

    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: release-binary-windows
        path: ./release-binary-windows

    - name: Install GitHub CLI
      run: sudo apt-get install -y gh

    - name: Delete existing release assets (if any)
      run: |
        gh release delete-asset v${{ env.CARGO_VERSION }} ${{ env.EXECUTABLE_NAME }}-x86_64-Linux || true
        gh release delete-asset v${{ env.CARGO_VERSION }} ${{ env.EXECUTABLE_NAME }}-aarch64-Linux || true
        gh release delete-asset v${{ env.CARGO_VERSION }} ${{ env.EXECUTABLE_NAME }}-x86_64-Windows.exe || true

    - name: Create GitHub Release
      run: |
        gh release create v${{ env.CARGO_VERSION }} \
        ./release-binary-x86_64-linux/${{ env.EXECUTABLE_NAME }}-x86_64-Linux \
        ./release-binary-aarch64-linux/${{ env.EXECUTABLE_NAME }}-aarch64-Linux \
        ./release-binary-windows/${{ env.EXECUTABLE_NAME }}-x86_64-Windows.exe \
        --title "Release ${{ env.CARGO_VERSION }}" \
        --notes "Automated release"
